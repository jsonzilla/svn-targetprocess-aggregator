# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# WIP
### NoDocs ###
GET     /person                             controllers.PersonController.index
### NoDocs ###
POST    /person                             controllers.PersonController.addPerson
### NoDocs ###
#GET     /persons                           controllers.PersonController.getPersons
### NoDocs ###
GET     /test                               controllers.PersonController.test

# AUTHENTICATION
POST	/api/v1/signin						controllers.Auth.signIn
POST	/api/v1/signout						controllers.Auth.signOut
POST	/api/v1/signup						controllers.Auth.signUp

# UNIT TEST PAGE
GET		/api/v1/test						controllers.Application.test

# USERNAMES
GET		/api/v1/usernames					controllers.Users.usernames

# ACCOUNT
GET		/api/v1/account						controllers.Account.info
PUT		/api/v1/account						controllers.Account.update
PUT		/api/v1/account/password	    	controllers.Account.updatePassword
DELETE  /api/v1/account						controllers.Account.delete

# PHASES
GET		/api/v1/phases						controllers.PhasesController.list(sort: Option[String], page: Int ?= 1, size: Int ?= 10)
POST	/api/v1/phases						controllers.PhasesController.insert
GET		/api/v1/phases/:id			    	controllers.PhasesController.info(id: Long)
PUT		/api/v1/phases/:id			    	controllers.PhasesController.update(id: Long)
PUT		/api/v1/phases/:id/order/:newOrder	controllers.PhasesController.updateOrder(id: Long, newOrder: Int)
DELETE	/api/v1/phases/:id			       	controllers.PhasesController.delete(id: Long)

# TERM
GET		/api/v1/phases/:id/term	            controllers.TermController.list(id: Long, done: Option[Boolean], sort: Option[String], page: Int ?= 1, size: Int ?= 10)
POST	/api/v1/phases/:id/term	            controllers.TermController.insert(id: Long)
GET		/api/v1/term/:id					controllers.TermController.info(id: Long)
PUT		/api/v1/term/:id					controllers.TermController.update(id: Long)
PUT		/api/v1/term/:id/order/:newOrder	controllers.TermController.updateOrder(id: Long, newOrder: Int)
PUT		/api/v1/term/:id/folder/:folder		controllers.TermController.updateFolder(id: Long, folder: Long)
PUT		/api/v1/term/:id/done			    controllers.TermController.updateDone(id: Long, done: Boolean = true)
DELETE	/api/v1/term/:id/done			    controllers.TermController.updateDone(id: Long, done: Boolean = false)
DELETE	/api/v1/term/:id					controllers.TermController.delete(id: Long)

# GENERAL
GET     /api/v1/update                     controllers.UpdateController.updateAll

# UNSAFE - COMMENT AFTER SETUP
### NoDocs ###
GET     /api/v1/unsafe/update              controllers.UpdateController.unsafeUpdateAll
### NoDocs ###
GET     /api/v1/unsafe/bootstrap           controllers.BootstrapController.createDefaultTables
GET     /api/v1/unsafe/:suffix/boot        controllers.BootstrapController.createTables(suffix: String)

# SUFFIX
GET     /api/v1/:suffix/update              controllers.UpdateController.update(suffix: String, from: Option[Long], to: Option[Long])
GET     /api/v1/:suffix/authors             controllers.AuthorController.getAuthors(suffix: String)
GET     /api/v1/:suffix/commits             controllers.CommitController.getCommits(suffix: String, revision: Option[Long])
GET     /api/v1/:suffix/commitstasks        controllers.CommitTaskController.getCommitsTasks(suffix)
GET     /api/v1/:suffix/commitsentryfiles   controllers.CommitEntryFileController.getCommitEntryFiles(suffix: String)
GET     /api/v1/:suffix/customfields        controllers.CustomFieldsController.getCustomFields(suffix: String)
GET     /api/v1/:suffix/entyfiles           controllers.EntryFileController.getEntryFiles(suffix: String)
GET     /api/v1/:suffix/tasks               controllers.TaskController.getTask(suffix: String)
GET     /api/v1/:suffix/authorsReport       controllers.ReportController.getAuthors(suffix: String)
GET     /api/v1/:suffix/bugsfiles           controllers.ReportController.getFilesBugs(suffix: String)
GET     /api/v1/:suffix/bugsfiles/:author   controllers.ReportController.getAuthorBugs(author: String, suffix: String)

# Map static resources from the /public folder to the /assets URL path
### NoDocs ###
GET     /assets/*file                       controllers.Assets.versioned(path="/public", file: Asset)

### NoDocs ###
GET   /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

### NoDocs ###
GET   /assets/*file                 controllers.Assets.versioned(path="/public", file: Asset)